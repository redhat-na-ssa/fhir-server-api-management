---

# https://red-hat-storage.github.io/ocs-training/training/ocs4/odf4-install-no-ui.html#_installing_openshift_data_foundation

- name: "Label {{ namespace_odf }}"
  kubernetes.core.k8s:
    state: patched
    kind: Namespace
    name: "{{ namespace_odf }}"
    definition:
      metadata:
        labels:
          openshift.io/cluster-monitoring: 'true'

- name: "label nodes"
  kubernetes.core.k8s:
    state: present
    kind: Node
    label_selectors: "jeff=alex"
    definition:
      metadata:
        labels:
          cluster.ocs.openshift.io/openshift-storage: ''

- name: "create operatorgroup in {{ namespace_odf }}"
  import_role:
    name: ../roles/operatorgroup
  vars:
    operatorgroup_name: "{{ namespace_odf }}"
    operatorgroup_namespace: "{{ namespace_odf }}"
    operatorgroup_target_namespace: "{{ namespace_odf }}"

- name: "deploy odf operator in {{ namespace_odf }}"
  import_role:
    name: ../roles/operator_olm
  vars:
    operator_name: "{{ odf_operator_packagemanifest }}"
    packagemanifest: "{{ odf_operator_packagemanifest }}"
    subscription_channel: "{{ odf_operator_subscription_channel }}"
    subscription_namespace: "{{ namespace_odf }}"
    subscription_name: "{{ odf_operator_subscription_name }}"
    automatic_installplan_approval: "{{ odf_operator_subscription_automatic_installplan_approval }}"
    subscription_starting_csv: "{{ odf_operator_subscription_starting_csv  }}"
    csv_prefix: "{{ odf_operator_csv_prefix }}"

- name: enable the console plugin 
  shell: |
    {{ openshift_cli }} patch console.operator cluster -n {{ odf_operator_subscription_name }} --type json -p '[{"op": "add", "path": "/spec/plugins", "value": ["odf-console"]}]'
  ignore_errors: true

- name: "create ODF custom resource"
  k8s:
    state: present
    name: "{{ odf_name }}"
    namespace: "{{ namespace_odf }}"
    definition: "{{ lookup('template', 'templates/'+ odf_cr_template) | from_yaml }} "

- name: "wait for StorageCluster {{ storage_cluster_name }} to be ready in {{ namespace_odf }}"
  shell: |
    {{ openshift_cli }} get StorageCluster/{{ storage_cluster_name }} -o jsonpath='{.status.conditions[?(@.type == "Available")].status}' -n {{ namespace_odf }}
  register: result
  until: result.stdout == 'True'
  retries: 50
  delay: 10
  changed_when: False
