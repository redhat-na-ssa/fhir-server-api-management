---

- name: set threescale facts
  set_fact:
    api_gw_url: "https://{{ apigw_hostname_subcontext }}.{{ ocp_domain }}"
    sso_confidential_realm_url: "https://zyncsso:{{ zync_sso_client_secret }}@sso-{{ namespace_sso }}.{{ ocp_domain }}"

########    Tenant    #############

- name: "Determine if {{ tenant_name }} tenant exists"
  kubernetes.core.k8s_info:
    kind: Tenant
    namespace: "{{ apimanager_namespace }}"
    name: "{{ tenant_name }}"
    api_version: capabilities.3scale.net/v1alpha1
  register: tenant_resource

- block:
  - debug:
      msg: temp tenant_id = "{{ tenant_resource.resources[0].status.tenantId }}"
  - set_fact:
      tenant_id: "{{ tenant_resource.resources[0].status.tenantId }}"
  when: 
    tenant_resource.resources[] is defined
- debug:
    msg: tenant_id = "{{ tenant_id }}" 

- block:

  - name: "tenant secret {{ tenant_name }}-admin-passwd-secret with tenant password"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        type: Opaque
        metadata:
          name: "{{ tenant_name }}-admin-passwd-secret"
          namespace: "{{ apimanager_namespace }}"
        data:
          admin_password: "{{ 'admin' | b64encode }}"
  
  - name: "create tenant {{ tenant_name }}"
    k8s:
      state: present
      namespace: "{{ apimanager_namespace }}"
      definition: "{{ lookup('template', 'templates/tenant.yml' ) | from_yaml }}"

  - name: "wait until {{ tenant_name }} tenant is up and running"
    shell: "{{ openshift_cli }} get tenant {{ tenant_name }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
    vars:
      json_template: '\{\{.status.tenantId\}\}'
    register: result
    until: result.stdout | int >= 1
    retries: 10
    delay: 15
    changed_when: false
  
  when: >
    use_custom_tenant|bool and
    tenant_id == 0

###################################



########    backend    #############
- name: "create backend {{ backend_name }}"
  k8s:
    state: present
    namespace: "{{ apimanager_namespace }}"
    definition: "{{ lookup('template', 'templates/backend.yml' ) | from_yaml }}"

- name: "wait until {{ backend_name }} backend is up and running"
  shell: "{{ openshift_cli }} get backend {{ backend_name }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
  vars:
    json_template: '\{\{.status.backendId\}\}'
  register: result
  until: result.stdout | int >= 1
  retries: 10
  delay: 10
  changed_when: false

###################################


########    product    #############
- name: "create product {{ api_product_name }}"
  k8s:
    state: present
    namespace: "{{ apimanager_namespace }}"
    definition: "{{ lookup('template', 'templates/product.yml' ) | from_yaml }}"

- name: "wait until {{ api_product_name }} product is up and running"
  shell: "{{ openshift_cli }} get product {{ api_product_name }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
  vars:
    json_template: '\{\{.status.productId\}\}'
  register: result
  until: result.stdout | int >= 1
  retries: 10
  delay: 10
  changed_when: false

###################################
