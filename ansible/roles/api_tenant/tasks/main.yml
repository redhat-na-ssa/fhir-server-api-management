---

- name: set threescale facts
  set_fact:
    api_gw_url: "https://{{ apigw_hostname_subcontext }}.{{ ocp_domain }}"
    # can we make this conditional
    sso_confidential_realm_url: "https://zyncsso:{{ zync_sso_client_secret }}@{{ sso_prefix }}.{{ ocp_domain }}/auth/realms/{{ sso_realm_id }}"
    backend_name: "{{ app_name }}-backend"
    api_product_name: "{{ app_name }}"
    developer_user: "{{ app_name }}-developer-user"
    developer_account: "{{ app_name }}-developer-account"
   # developer_account_application : "{{ developer_account }}-application"
    
########    Tenant    #############

- name: "Determine if {{ tenant_name }} tenant exists"
  kubernetes.core.k8s_info:
    kind: Tenant
    namespace: "{{ apimanager_namespace }}"
    name: "{{ tenant_name }}"
    api_version: capabilities.3scale.net/v1alpha1
  register: tenant_resource

- block:
  - debug:
      msg: temp tenant_id = "{{ tenant_resource.resources[0].status.tenantId }}"
  - set_fact:
      tenant_id: "{{ tenant_resource.resources[0].status.tenantId }}"
  when: 
    tenant_resource.resources[] is defined
- debug:
    msg: tenant_id = "{{ tenant_id }}" 

- block:

  - name: "tenant secret {{ tenant_name }}-admin-passwd-secret with tenant password"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        type: Opaque
        metadata:
          name: "{{ tenant_name }}-admin-passwd-secret"
          namespace: "{{ apimanager_namespace }}"
        data:
          admin_password: "{{ 'admin' | b64encode }}"
  
  - name: "create tenant {{ tenant_name }}"
    k8s:
      state: present
      namespace: "{{ apimanager_namespace }}"
      definition: "{{ lookup('template', 'templates/tenant.yml' ) | from_yaml }}"

  - name: "wait until {{ tenant_name }} tenant is up and running"
    shell: "{{ openshift_cli }} get tenant {{ tenant_name }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
    vars:
      json_template: '\{\{.status.tenantId\}\}'
    register: result
    until: result.stdout | int >= 1
    retries: 10
    delay: 15
    changed_when: false
  
  when: >
    use_custom_tenant|bool and
    tenant_id == 0

###################################



########    backend    #############
- name: "create backend {{ backend_name }} with url {{ backend_url }} "
  k8s:
    state: present
    namespace: "{{ apimanager_namespace }}"
    definition: "{{ lookup('template', 'templates/backend.yml' ) | from_yaml }}"

- name: "wait until {{ backend_name }} backend is up and running"
  shell: "{{ openshift_cli }} get backend {{ backend_name }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
  vars:
    json_template: '\{\{.status.backendId\}\}'
  register: result
  until: result.stdout | int >= 1
  retries: 10
  delay: 10
  changed_when: false

###################################


########    product    #############
- name: "create product {{ api_product_name }}"
  k8s:
    state: present
    namespace: "{{ apimanager_namespace }}"
    definition: "{{ lookup('template', 'templates/product.yml' ) | from_yaml }}"

- name: "wait until {{ api_product_name }} product is up and running"
  shell: "{{ openshift_cli }} get product {{ api_product_name }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
  vars:
    json_template: '\{\{.status.productId\}\}'
  register: result
  until: result.stdout | int >= 1
  retries: 10
  delay: 10
  changed_when: false

###################################


##### developer secret, user and account ######
- name: "developer user secret {{ developer_account }}-secret"
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ developer_account }}-secret"
        namespace: "{{ apimanager_namespace }}"
        type: Opaque
      data:
       password: "{{ 'password' | b64encode }}"

- name: "create developer account {{ developer_account }}"
  k8s:
    state: present
    namespace: "{{ apimanager_namespace }}"
    definition: "{{ lookup('template', 'templates/developer_account.yml' ) | from_yaml }}"

- name: "create developer user {{ developer_user }}"
  k8s:
    state: present
    namespace: "{{ apimanager_namespace }}"
    definition: "{{ lookup('template', 'templates/developer_user.yml' ) | from_yaml }}"

# The CRs are still tech preview as of Nov 2022, so there are some limitations with deleting certain resources
#https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.12/html/operating_3scale/provision-threescale-services-via-operator#limitations-capabilities
- name: "wait until {{ developer_user }} developer_user is up and running"
  shell: "{{ openshift_cli }} get developeruser {{ developer_user }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
  vars:
    # fix
    json_template: '\{\{.status.developerUserID\}\}'
  register: result
  until: result.stdout | int >= 1
  retries: 10
  delay: 10
  changed_when: false
#######################################


####### active Docs ####################
# TODO - use CR or 3scale toolbox
# https://gist.github.com/gbengataylor/b9330056d71ec193c580f6cc7616d2b5
###################################



##### application ######
# TODO - use REST API 


## comment out until Application CR is available #####
# - name: "create developer_account_application {{ developer_account_application }}"
#   k8s:
#     state: present
#     namespace: "{{ apimanager_namespace }}"
#     definition: "{{ lookup('template', 'templates/developer_account_application.yml' ) | from_yaml }}"

# - name: "wait until {{ developer_account_application }} application is up and running"
#   shell: "{{ openshift_cli }} get Application {{ developer_account_application }} -o template --template={{ json_template }} -n {{ apimanager_namespace }}"
#   vars:
#     json_template: '\{\{.status.productId\}\}' # fix
#   register: result
#   until: result.stdout | int >= 1
#   retries: 10
#   delay: 10
#   changed_when: false

#####################